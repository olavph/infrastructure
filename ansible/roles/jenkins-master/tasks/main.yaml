---
- name: Create Jenkins directories
  file:
    name={{item.name}} owner={{item.owner}} group={{item.group}}
    mode={{item.mode}} state=directory
  with_items:
    - { name: "{{jenkins_bin_dir}}/bin", owner: "{{user_name}}", group: "{{user_name}}",
        mode: "0755" }
    - { name: /var/log/jenkins, owner: "{{user_name}}", group: "{{user_name}}", mode: "0755" }
  tags:
    - setup

- name: Install {{jenkins_bin_dir}}/bin/jenkinsd
  template:
    src=jenkinsd dest="{{jenkins_bin_dir}}/bin/jenkinsd"
    owner=root group=root mode=0755
  notify: restart jenkins
  tags:
    - setup

- name: Download jenkins.war checksum
  get_url:
    url=http://mirrors.jenkins-ci.org/war-stable/latest/jenkins.war.sha256
    dest="{{jenkins_bin_dir}}/jenkins.war.sha256"
    owner=root group=root
    force=yes
  tags:
    - setup

- name: Read jenkins.war checksum
  shell: "cat {{jenkins_bin_dir}}/jenkins.war.sha256 | awk '{ print $1 }'"
  register: jenkins_war_sha256
  tags:
    - setup

- name: Download jenkins.war
  get_url:
    url=http://mirrors.jenkins-ci.org/war-stable/latest/jenkins.war
    dest="{{jenkins_bin_dir}}/jenkins.war"
    owner=root group=root
    timeout=30
    checksum="sha256:{{jenkins_war_sha256.stdout}}"
  register: jenkinswar
  notify: restart jenkins
  tags:
    - setup

- name: Ensure jenkins.war permissions
  file:
    path="{{jenkins_bin_dir}}/jenkins.war" owner=root group=root mode=0644
  when: jenkinswar.changed
  notify: restart jenkins
  tags:
    - setup

- name: Configure web server
  template:
    src=jenkins.conf dest=/etc/nginx/conf.d/jenkins.conf
    owner=root group=root mode=0644
  notify: restart nginx
  tags:
    - setup

# The following steps needed to automatically setup Jenkins without user
# intervention are based on
# https://wjoel.com/posts/ansible-jenkins-pipeline-part-1.html

- name: Create Jenkins admin password hash
  shell:
    echo -n "{{jenkins_admin_password}}{ansible_jenkins}" | sha256sum - | awk '{ print $1; }'
  register: jenkins_admin_password_hash
  tags:
    - setup

- name: Create Jenkins admin user directory
  file:
    path="{{jenkins_home_dir}}/users/{{jenkins_admin_user}}"
    owner={{user_name}} group={{user_name}} mode=0755 state=directory recurse=yes
  tags:
    - setup

- name: Create Jenkins admin user
  template:
    src=admin_config.xml.j2 dest="{{jenkins_home_dir}}/users/{{jenkins_admin_user}}/config.xml"
    owner={{user_name}} group={{user_name}}
  register: jenkins_admin_config
  tags:
    - setup

- name: Create Jenkins config
  copy:
    src=config.xml dest="{{jenkins_home_dir}}/config.xml"
    owner={{user_name}} group={{user_name}}
  register: jenkins_config
  tags:
    - setup

- name: Set Jenkins URL
  template:
    src: jenkins.model.JenkinsLocationConfiguration.xml.j2
    dest: "{{jenkins_home_dir}}/jenkins.model.JenkinsLocationConfiguration.xml"
    owner: "{{user_name}}"
    group: "{{user_name}}"
  register: jenkins_url_config
  tags:
    - setup

- name: Restart Jenkins if necessary
  service: name=jenkins state=restarted
  when: jenkins_admin_config|changed or jenkins_config|changed or jenkins_url_config|changed
  tags:
    - setup

- name: Wait for Jenkins to become available
  wait_for: port={{jenkins_port}}
  tags:
    - setup

- name: Get Jenkins crumb
  uri:
    user: "{{jenkins_admin_user}}"
    password: "{{jenkins_admin_password}}"
    force_basic_auth: yes
    url: "{{jenkins_local_url}}/crumbIssuer/api/json"
    return_content: yes
  register: jenkins_crumb
  until:
    jenkins_crumb.content.find('Please wait while Jenkins is getting ready') == -1
  retries: 10
  delay: 5
  tags:
    - setup

- name: Set Jenkins crumb token
  set_fact:
    jenkins_crumb_token: "{{jenkins_crumb.json.crumbRequestField}}={{jenkins_crumb.json.crumb}}"
  tags:
    - setup

- name: Install Jenkins plugins
  uri:
    user: "{{jenkins_admin_user}}"
    password: "{{jenkins_admin_password}}"
    force_basic_auth: yes
    url: "{{jenkins_local_url}}/pluginManager/install?plugin.{{item}}.default=on&{{jenkins_crumb_token}}"
    method: POST
    status_code: [200, 302]
  register: plugins_api_response
  until: plugins_api_response.status in [200, 302]
  retries: 3
  delay: 10
  with_items: "{{jenkins_plugins}}"
  tags:
    - setup

- name: Wait for plugins to be installed
  uri:
    user: "{{jenkins_admin_user}}"
    password: "{{jenkins_admin_password}}"
    force_basic_auth: yes
    url: "{{jenkins_local_url}}/updateCenter/installStatus?{{jenkins_crumb_token}}"
    return_content: yes
  register: jenkins_plugin_status
  until: "'Pending' not in jenkins_plugin_status.json.data.jobs|map(attribute='installStatus')"
  retries: 60
  delay: 10
  tags:
    - setup

- name: Check if we need to restart Jenkins to activate plugins
  uri:
    user: "{{jenkins_admin_user}}"
    password: "{{jenkins_admin_password}}"
    force_basic_auth: yes
    url: "{{jenkins_local_url}}/updateCenter/api/json?tree=restartRequiredForCompletion&{{jenkins_crumb_token}}"
    return_content: yes
  notify: restart jenkins
  tags:
    - setup
